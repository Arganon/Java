class Barrier {
	int count = 0;
	int max = 0;
	int tempCounter = 0;
	boolean flag = false;

	public Barrier(int count) {
		this.count = count;
		this.max = count;
	}
	
	public void aqcuire() throws InterruptedException {
		synchronized(this) {
			System.out.println(Thread.currentThread().getName() + " is start. ");
			while(flag == true) {
				System.out.println(Thread.currentThread().getName() + " is wait. ");
				this.wait();
			}
			while(flag == false) {
				count--;
				countDown();
			}
			if (tempCounter == max) {
				count = max;
				tempCounter = 0;
				flag = false;
				this.notifyAll();
			}
		}
	}
	
	private void countDown() throws InterruptedException {
		synchronized(this) {
			System.out.println(Thread.currentThread().getName() + " is in countDown. ");
			while(count > 0) {
				this.wait();
			}
			flag = true;
			tempCounter++;
			this.notifyAll();
		}
	}
}

class MyThread extends Thread {
	Barrier s;
	String name;
 
	public MyThread(Barrier s, String name) {
		this.s = s;
		this.name = name;
	}
	
	@Override
	public void run() {
		try {
			s.aqcuire();
			System.out.println("Thread " + Thread.currentThread().getName() + " is end of work. ");

		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
}

public class BarrierThreads {

	public static void main(String[] args) {
		Barrier b = new Barrier(3);
		MyThread t1 = new MyThread(b, "0");
		MyThread t2 = new MyThread(b, "1");
		MyThread t3 = new MyThread(b, "2");
		MyThread t4 = new MyThread(b, "3");
		MyThread t5 = new MyThread(b, "4");
		MyThread t6 = new MyThread(b, "5");
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
		t5.start();
		t6.start();
	}
}
